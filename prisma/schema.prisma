// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  oauth_token        String?
  oauth_token_secret String?
  session_state      String?
  steamid            String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  PlayerTeam    PlayerTeam[]
  league        League[]
  highlight     highlight[]
  highlightLike highlightLike[]
  pickem        pickem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Player {
  id           String           @id @default(cuid())
  steamid      String?          @unique
  name         String
  price        Int
  image        String           @db.Text
  rareity      String
  priceadjust  Int              @default(0)
  stats        Stats[]
  team         Team             @relation(fields: [teamId], references: [id])
  teamId       String
  playerPoints playerPoints[]
  userPlayer   SelectedPlayer[]

  @@index([teamId])
}

model Stats {
  id           String   @id @default(cuid())
  event        String?
  hltv         Float    @default(0.0)
  KAST         Int      @default(0)
  ADR          Int      @default(0)
  utilThrown   Int      @default(0)
  hs           Int      @default(0)
  entryKills   Float    @default(0.0)
  clutchRounds Float    @default(0.0)
  deathsTraded Float    @default(0.0)
  Objectives   Float    @default(0.0)
  Player       Player[]
}

model PlayerTeam {
  id             String           @id @default(cuid())
  teamName       String
  points         String
  rolePoints     String
  rank           Int?
  league         League?          @relation(fields: [leagueId], references: [id])
  User           User?            @relation(fields: [userId], references: [id])
  leagueId       String?
  userId         String?
  SelectedPlayer SelectedPlayer[]
  ready          Boolean          @default(false)

  @@index([leagueId])
  @@index([userId])
}

model SelectedPlayer {
  id           String       @id @default(cuid())
  name         String
  price        Int
  steamid      String?
  image        String?      @db.Text
  rareity      String
  bonus        bonus?       @relation(fields: [bonusName], references: [name])
  playerTeamId String?
  bonusName    String?
  PlayerTeam   PlayerTeam?  @relation(fields: [playerTeamId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  points       point[]
  bonusPoint   bonusPoint[]
  Player       Player?      @relation(fields: [playerId], references: [id])
  playerId     String?

  @@index([bonusName])
  @@index([playerTeamId])
  @@index([playerId])
}

model bonusPoint {
  id               String          @id @default(cuid())
  value            Int
  SelectedPlayer   SelectedPlayer? @relation(fields: [selectedPlayerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  selectedPlayerId String?
  roundNumber      Int?

  @@index([selectedPlayerId])
}

//WHY DO THEY NOT SUPPORT ARRAYS OF PRIMITIVES!!!?????
model point {
  id               String          @id @default(cuid())
  value            Int
  SelectedPlayer   SelectedPlayer? @relation(fields: [selectedPlayerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  selectedPlayerId String?
  roundNumber      Int?

  @@index([selectedPlayerId])
}

model Team {
  id       String   @id @default(cuid())
  teamName String
  Player   Player[]
  league   League[]
  pickem   pickem[]

  pickemResults   pickemResults? @relation(fields: [pickemResultsId], references: [id])
  pickemResultsId String?

  @@index([pickemResultsId])
}

model League {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String          @db.Text
  Teams          Team[]
  User           User[]
  offical        Boolean         @default(false)
  playerTeam     PlayerTeam[]
  LeagueRounds   LeagueRounds?   @relation(fields: [leagueRoundsId], references: [id])
  openDate       DateTime        @default(now())
  startDate      DateTime        @default(now())
  endDate        DateTime        @default(now())
  leagueRoundsId String?
  highlight      highlight[]
  pickemResults  pickemResults[]

  @@index([leagueRoundsId])
}

model LeagueRounds {
  id           String   @id @default(cuid())
  roundsPlayed round[]
  League       League[]
}

model round {
  id             String        @id @default(cuid())
  number         Int           @default(1)
  LeagueRounds   LeagueRounds? @relation(fields: [leagueRoundsId], references: [id])
  leagueRoundsId String?

  @@index([leagueRoundsId])
}

model bonus {
  name           String           @id @unique
  description    String           @db.Text
  SelectedPlayer SelectedPlayer[]
}

model playerPoints {
  id           String @id @unique @default(cuid())
  round        Int
  league       String
  ADR_warrior  Int?
  all_rounder  Int?
  PTFO         Int?
  awper        Int?
  clutcher     Int?
  entry_king   Int?
  head_clicker Int?
  knife        Int?
  points       Int?
  site_on_lock Int?
  stat_padder  Int?
  trade_me     Int?
  util_nerd    Int?
  Player       Player @relation(fields: [playerId], references: [id])
  playerId     String

  @@index([playerId])
}

model pickem {
  id              String        @id @unique @default(cuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @unique
  playoffs        Team[]
  lowestRating    String
  highestRating   String
  results         pickemResults @relation(fields: [pickemResultsId], references: [id])
  pickemResultsId String

  @@index([userId])
  @@index([pickemResultsId])
}

model pickemResults {
  id            String   @id @unique @default(cuid())
  highestRating String
  lowestRating  String
  playoffs      Team[]
  league        League   @relation(fields: [leagueId], references: [id])
  leagueId      String
  pickem        pickem[]

  @@index([leagueId])
}

model highlight {
  id            String          @id @unique @default(cuid())
  author        User            @relation(fields: [userId], references: [id])
  likes         Int
  userId        String
  source        String
  title         String
  League        League?         @relation(fields: [leagueId], references: [id])
  leagueId      String?
  submitDate    DateTime        @default(now())
  highlightLike highlightLike[]

  @@index([userId])
  @@index([leagueId])
}

model highlightLike {
  id          String    @id @unique @default(uuid())
  likedBy     User      @relation(fields: [userId], references: [id])
  highlight   highlight @relation(fields: [highlightId], references: [id], onDelete: Cascade)
  highlightId String
  userId      String

  @@index([highlightId])
  @@index([userId])
}
